{"type":"WidgetSummary","body":"datasource = prism.activeDashboard.datasource\ntitle = datasource.title\nwidgetId = payload.widget._id\npayload.widget.inProgress = 1\n\nvar prismHasInternalHttp = prism.$injector.has('base.factories.internalHttp');\nvar $internalHttp = prism.$injector.get('base.factories.internalHttp');\n\nfunction uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\nfunction uuidv8() {\n    return ([1e4] + -1e3 + -1e3 + -3e3 + -1e3 + -1e3 + -3e3 + -3e3 + -1e0).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\nquid = uuidv4()\n\nif (datasource.ApiToken !== undefined && datasource.ApiToken != '') {\n    callNoteBook()\n} else {\n    datasource.ApiToken = ''\n    const config = {\n        url: prism.proxyurl + '/api/v1/authentication/tokens/api',\n        method: 'GET',\n        contentType: 'application/json',\n        async: false,\n    }\n\n    res = $internalHttp(config, false)\n    res.then(function (response) {\n        datasource.ApiToken = response.data.token\n        callNoteBook()\n    })\n}\n\nfunction callNoteBook() {\n    question = payload.data.question.replaceAll('\"', '\\\\\"')\n    to_validate_entities_from_question = true\n    if (question == \"\") {\n        console.log(\"Empty Question\");\n        var widgetName = $('#WidgetList')[0].value\n        question = \"dashboard \" + prism.activeDashboard.title + \" widget \" + widgetName;\n        to_validate_entities_from_question = false\n    }\n\n    requestStructure = {\n        \"datasource\": { title: 'AITransformation' },\n        \"metadata\": [\n            {\n                \"jaql\": {\n                    \"table\": \"Empty\",\n                    \"column\": \"Empty\",\n                    \"dim\": \"[Empty.Empty]\",\n                    \"filter\": { \"contains\": new Date() },\n                    \"datatype\": \"text\",\n                    \"merged\": true,\n                    \"title\": \"Empty\"\n                },\n                \"instanceid\": \"00128-E54A-D6\",\n                \"field\": {\n                    \"id\": \"[Empty.Empty]\",\n                    \"index\": 0\n                }\n            }\n        ],\n        \"count\": 1,\n        \"offset\": 0,\n        \"transformData\": [\n            {\n                \"transformDataFormat\": {\n                    \"CustomCodeTransformerFormatType\": \"Json\"\n                },\n                \"customCode\": {\n                    \"codePath\": \"/work/storage_notebooks/custom_code_notebooks/notebooks/WidgetSummary1/WidgetSummary1.ipynb\",\n                    \"cellsDisable\": [\n                        0\n                    ],\n                    \"language\": \"Python\",\n                    \"serverUrl\": \"customcode:8888\",\n                    \"mode\": \"Post\",\n                    \"additionalParameters\": \"{\\\"question\\\":\\\"\" + question +\n                        \"\\\",\\\"to_validate_entities_from_question\\\":\" + to_validate_entities_from_question +\n                        \",\\\"model_name\\\":\\\"\" + title +\n                        \"\\\",\\\"table_name\\\":\\\"\" + payload.data.table +\n                        \"\\\",\\\"widgetId\\\":\\\"\" + quid +\n                        \"\\\",\\\"cookie\\\":\\\"\" + datasource.ApiToken + \"\\\"}\"\n                }\n            }\n        ],\n        \"isMaskedResult\": true,\n        \"format\": \"json\",\n        \"widgetType\": \"fakewidget\",\n        \"by\": \"widget\",\n        \"dashboard\": prism.activeDashboard + \";\" + title,\n        \"widget\": widgetId + \";Generated\",\n        \"queryGuid\": uuidv8()\n    }\n    console.log(\"Using cookie \", datasource.ApiToken)\n    const config = {\n        url: prism.proxyurl + '/api/datasources/' + title + '/jaql',\n        method: 'POST',\n        data: JSON.stringify(requestStructure),\n        contentType: 'application/json',\n        async: false,\n    };\n\n\n    document.getElementById('outputContainer').innerHTML = \"<H1>Looking for the response to your question</H1>\"\n    var prismHasInternalHttp = prism.$injector.has('base.factories.internalHttp');\n    res = $internalHttp(config, false);\n    res.then(function (response) {\n        payload.widget.inProgress = 0\n        values = response.data.values\n        data = values[0][0]['data']\n        document.getElementById('outputContainer').innerHTML = data\n        payload.widget.lastResult = data\n        widgetSummary = values[1][0]['data']\n        prism.activeDashboard.widgets.$$widgets.forEach(widget => {\n            if (widget.title == \"Text Blox Summary\") {\n                prism.activeDashboard.$dashboard.deleteWidget(widget);\n                prism.activeDashboard.layout.$$remove(widget);\n                prism.activeDashboard.widgets.$$remove(widget);\n                widget.destroy();\n                var command = prism.$injector.get('$command');\n                var wb = prism.$injector.get(\"widget-new.services.widgetBuilder\");\n                var textwidget = wb.getWidget(prism.activeDashboard.datasource, \"richtexteditor\", prism.activeDashboard, {});\n                textwidget.title = \"Text Blox Summary\";\n                textwidget.style.content.html = \"<font size=\\\"5\\\">\" + widgetSummary + \"</font>\";\n                if (prism.activeDashboard.layout.columns.length == 1) {\n                    var layout = { column: 0, cell: 0, subcell: 1, width: 200, height: 800 };\n                    command.execute('dashboard.commands.createNewWidget', { $scope: prism.$scope }, { widget: textwidget, layout: layout });\n                } else {\n                    command.execute('dashboard.commands.createNewWidget', { $scope: prism.$scope }, { widget: textwidget, layout: layout }).then(function () {\n                        prism.activeDashboard.layout.columns[1].cells.splice(0, 0, prism.activeDashboard.layout.columns[0].cells.pop());\n                        window.prism.activeDashboard.layout.columns[1].cells[0].subcells[0].elements[0].height = window.prism.activeDashboard.layout.columns[0].cells[0].subcells[0].elements[0].height;\n                        prism.activeDashboard.$dashboard.updateDashboard(prism.activeDashboard, \"layout\");\n                    });\n                }\n            }\n        });\n    })\n    let timesRun = 0;\n    const interval = setInterval(async () => {\n        timesRun += 1;\n        if (timesRun === 60) {\n            clearInterval(interval);\n        }\n        if (payload.widget.inProgress == 1) {\n            let text = await (await fetch('/branding/BloxAI/' + quid + '.html')).text();\n            if (\"api not found\" != text) {\n                $('#outputContainer').html(text);\n                payload.widget.lastResult = text\n            }\n        }\n    }, 1000);\n\n}","snippet":{"type":"WidgetSummary","title":"title"}}